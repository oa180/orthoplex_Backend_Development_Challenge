{"version":3,"names":["jwt","promisify","AppError","createToken","payload","jwtToken","sign","process","env","JWT_SECRET","expiresIn","JWT_EXPIRES_IN","error","message","verifyToken","token","decodedPayload","verify"],"sources":["jwt.js"],"sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport { promisify } from 'util';\r\nimport AppError from '../../middlewares/error/appError.js';\r\n\r\nexport const createToken = payload => {\r\n  try {\r\n    if (!payload)\r\n      throw new AppError('Payload is missing at create token function!', 500);\r\n\r\n    const jwtToken = jwt.sign(payload, process.env.JWT_SECRET, {\r\n      expiresIn: process.env.JWT_EXPIRES_IN,\r\n    });\r\n\r\n    return jwtToken;\r\n  } catch (error) {\r\n    throw new AppError(error.message, 500);\r\n  }\r\n};\r\n\r\nexport const verifyToken = async token => {\r\n  try {\r\n    if (!token)\r\n      throw new AppError('Token is missing at verify token function!', 500);\r\n\r\n    const decodedPayload = await promisify(jwt.verify)(\r\n      token,\r\n      process.env.JWT_SECRET\r\n    );\r\n\r\n    return decodedPayload;\r\n  } catch (error) {\r\n    throw new AppError('Invalid Token, Please login!', 500);\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,cAAc;AAC9B,SAASC,SAAS,QAAQ,MAAM;AAChC,OAAOC,QAAQ,MAAM,qCAAqC;AAE1D,OAAO,MAAMC,WAAW,GAAGC,OAAO,IAAI;EACpC,IAAI;IACF,IAAI,CAACA,OAAO,EACV,MAAM,IAAIF,QAAQ,CAAC,8CAA8C,EAAE,GAAG,CAAC;IAEzE,MAAMG,QAAQ,GAAGL,GAAG,CAACM,IAAI,CAACF,OAAO,EAAEG,OAAO,CAACC,GAAG,CAACC,UAAU,EAAE;MACzDC,SAAS,EAAEH,OAAO,CAACC,GAAG,CAACG;IACzB,CAAC,CAAC;IAEF,OAAON,QAAQ;EACjB,CAAC,CAAC,OAAOO,KAAK,EAAE;IACd,MAAM,IAAIV,QAAQ,CAACU,KAAK,CAACC,OAAO,EAAE,GAAG,CAAC;EACxC;AACF,CAAC;AAED,OAAO,MAAMC,WAAW,GAAG,MAAMC,KAAK,IAAI;EACxC,IAAI;IACF,IAAI,CAACA,KAAK,EACR,MAAM,IAAIb,QAAQ,CAAC,4CAA4C,EAAE,GAAG,CAAC;IAEvE,MAAMc,cAAc,GAAG,MAAMf,SAAS,CAACD,GAAG,CAACiB,MAAM,CAAC,CAChDF,KAAK,EACLR,OAAO,CAACC,GAAG,CAACC,UACd,CAAC;IAED,OAAOO,cAAc;EACvB,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACd,MAAM,IAAIV,QAAQ,CAAC,8BAA8B,EAAE,GAAG,CAAC;EACzD;AACF,CAAC"}